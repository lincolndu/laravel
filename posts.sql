-- phpMyAdmin SQL Dump
-- version 4.2.12deb2
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jul 23, 2015 at 07:33 PM
-- Server version: 5.6.24-0ubuntu2.1
-- PHP Version: 5.6.4-4ubuntu6.2

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `zia_hall`
--

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE IF NOT EXISTS `posts` (
`id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `photo` varchar(100) NOT NULL,
  `d_post` text NOT NULL,
  `remember_token` varchar(100) NOT NULL,
  `updated_at` varchar(100) NOT NULL,
  `created_at` varchar(100) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `photo`, `d_post`, `remember_token`, `updated_at`, `created_at`) VALUES
(17, 'CRUD With Pagination In Laravel', '20983_806819259353862_3317146975456168237_n.jpg', 'Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database.', '', '1437562818', '1437491328'),
(18, 'store new users in the database. Now that you', '10561606_806819122687209_8303592692802204339_n.jpg', 'Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database.', '', '1437562879', '1437562879'),
(19, 'controllers already contain the logic (via th', '10561645_982988935079846_7443168640812343105_n.jpg', 'Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database. Now that you have routes and views setup for the included authentication controllers, you are ready to register and authenticate new users for your application. You may simply access your defined routes in a browser. The authentication controllers already contain the logic (via their traits) to authenticate existing users and store new users in the database.', '', '1437562914', '1437562914'),
(20, 'Our awesome call to action title goes here!', '10561606_806819122687209_8303592692802204339_n.jpg', 'The Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.\r\nThe Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.\r\nThe Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.', '', '1437574836', '1437574836'),
(21, 'If you would like to provide "remember m', '11096526_10153306332679363_6105397326212439256_n.jpg', 'The Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.\r\n\r\nThe Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.\r\n\r\nThe Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieve the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.', '', '1437575007', '1437575007'),
(22, 'method is compatible with the Bootstrap CSS framework.', '11265015_829105870458534_3071985539743186904_n.jpg', 'The render method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper ?page query string variable. Remember, the HTML generated by the render method is compatible with the Bootstrap CSS framework.\r\n\r\nThe render method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper ?page query string variable. Remember, the HTML generated by the render method is compatible with the Bootstrap CSS framework.\r\n\r\nThe render method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper ?page query string variable. Remember, the HTML generated by the render method is compatible with the Bootstrap CSS framework.', '', '1437581697', '1437581697'),
(23, 'method is compatible with the Bootstrap CSS framework.', '11102009_825899674112487_6132173488950690242_n.jpg', 'method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.method is compatible with the Bootstrap CSS framework.', '', '1437581720', '1437581720'),
(24, 'Paginating Query Builder Results', '13493_982989928413080_9024045716002842532_n.jpg', 'There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method provided by Laravel automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the ?page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.', '', '1437607327', '1437607327'),
(25, ' this value is automatically detected by Laravel, and i', '20983_806819259353862_3317146975456168237_n.jpg', 'There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method provided by Laravel automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the ?page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method provided by Laravel automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the ?page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.', '', '1437607347', '1437607347'),
(26, ' this value is automatically detected by Laravel, and i', '10561606_806819122687209_8303592692802204339_n.jpg', ' this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i this value is automatically detected by Laravel, and i', '', '1437607366', '1437607366'),
(27, 'rendering your view:If you only need to display simple "Next" and "Previous" links in your paginatio', '11121105_806819126020542_2556149145009232530_n.jpg', 'If you only need to display simple "Next" and "Previous" links in your pagination view, you have the option of using the simplePaginate method to perform a more efficient query. This is very useful for large datasets if you do not need to display a link for each page number when rendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you have the option of using the simplePaginate method to perform a more efficient query. This is very useful for large datasets if you do not need to display a link for each page number when rendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you have the option of using the simplePaginate method to perform a more efficient query. This is very useful for large datasets if you do not need to display a link for each page number when rendering your view:', '', '1437607394', '1437607394'),
(28, 'rendering your view:If you only need to display simple "Next" and "Previous" links in your paginatio', '10561645_982988935079846_7443168640812343105_n.jpg', 'rendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you h', '', '1437607507', '1437607507'),
(29, 'pagination view, you hrendering your view:If you ', 'rotaract.jpg', 'rendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you hrendering your view:If you only need to display simple "Next" and "Previous" links in your pagination view, you h', '', '1437607554', '1437607554'),
(30, 'you hrendering your view:If you pagination view, ', '1012901_442451912553698_1625667225_n.jpg', 'pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you pagination view, you hrendering your view:If you ', '', '1437607632', '1437607632'),
(31, 'simplePaginate methods on a query builder or ', '11025995_624914857640735_9191849740042678886_n.jpg', 'When you call the paginate or simplePaginate methods on a query builder or Eloquent query, you will receive a paginator instance. When calling the paginate method, you will receive an instance of Illuminate\\Pagination\\LengthAwarePaginator. When calling the simplePaginate method, you will receive an instance of Illuminate\\Pagination\\Paginator. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array.When you call the paginate or simplePaginate methods on a query builder or Eloquent query, you will receive a paginator instance. When calling the paginate method, you will receive an instance of Illuminate\\Pagination\\LengthAwarePaginator. When calling the simplePaginate method, you will receive an instance of Illuminate\\Pagination\\Paginator. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array.When you call the paginate or simplePaginate methods on a query builder or Eloquent query, you will receive a paginator instance. When calling the paginate method, you will receive an instance of Illuminate\\Pagination\\LengthAwarePaginator. When calling the simplePaginate method, you will receive an instance of Illuminate\\Pagination\\Paginator. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array.When you call the paginate or simplePaginate methods on a query builder or Eloquent query, you will receive a paginator instance. When calling the paginate method, you will receive an instance of Illuminate\\Pagination\\LengthAwarePaginator. When calling the simplePaginate method, you will receive an instance of Illuminate\\Pagination\\Paginator. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array.', '', '1437608053', '1437608053'),
(32, 'Appending To Pagination Links', '10370449_562044320594456_7649757104232593399_n.jpg', 'You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:', '', '1437608328', '1437608328'),
(33, 'Our awesome call to action title goes here!', '20983_806819259353862_3317146975456168237_n.jpg', 'You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:', '', '1437608363', '1437608363'),
(34, 'rendering your view:If you only need to display simple "Next" and "Previous" links in your paginatio', '10947277_806819109353877_3485862482833459658_n.jpg', 'You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:', '', '1437608403', '1437608403'),
(35, 'this value is automatically detected by Laravel, and i', '10561606_806819122687209_8303592692802204339_n.jpg', 'You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:vYou may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:You may add to the query string of pagination links using the appends method. For example, to append &sort=votes to each pagination link, you should make the following call to appends:v', '', '1437608427', '1437608427'),
(36, 'store new users in the database. Now that you', '10561645_982988935079846_7443168640812343105_n.jpg', 'There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method provided by Laravel automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the ?page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method provided by Laravel automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the ?page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.', '', '1437629882', '1437628788');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
 ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=37;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
